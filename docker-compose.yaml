services:
  project-practice:
    image: project-practice:latest
    build:
      context: .
      args:
        DOCKER_BUILDKIT: 1
    restart: always
    ports:
      - "8080:8080"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      COMPANY_DEFAULT_EMAIL: ${COMPANY_DEFAULT_EMAIL}
      COMPANY_DEFAULT_PASSWORD: ${COMPANY_DEFAULT_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      CLIENT_IP: ${CLIENT_IP}
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_LOGIN: ${SMTP_LOGIN}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_EMAIL: ${SMTP_EMAIL}
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1
      interval: 30s
      timeout: 5s
      start_period: 30s
      retries: 5
    depends_on:
      - postgres
      - redis
      - minio
      - kafka

  postgres:
    image: postgres:17.3
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

  minio:
    image: minio/minio:latest
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - minio_data:/data

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5


  kafka:
    image: bitnami/kafka:3.9.0
    restart: always
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_NODE_ID: 1
      KAFKA_KRAFT_CLUSTER_ID: NH4I7CHET2CN-TmAq27pLQ
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka:9093
    healthcheck:
      test: kafka-topics.sh --bootstrap-server localhost:9092 --list
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5
    labels:
      amplicode.image: bitnami/kafka

volumes:
  postgres_data:
  minio_data:
  kafka_data: